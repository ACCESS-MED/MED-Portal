<div class="about-page">
  <nav class="menu">
    <a class="menu-item selected" href="#about">About</a>
    <a class="menu-item" href="#reviewer_guidelines">Reviewer guidelines</a>
    <a class="menu-item" href="#editorial_board">Editorial board</a>
  </nav>

  <div class="main" id="about">
    <h1>The Journal of Open Source Software</h1>

    <p class="lead">The Journal of Open Source Software (JOSS) is a <strong>developer friendly</strong> journal for research codes.</p>

    <h3>What <em>exactly</em> do you mean by 'journal'</h3>

    <p>The Journal of Open Source Software (JOSS) is a legitimate academic journal. We have a rigorous peer review process and a first-class <%= link_to "editorial board", editors_path %>. Upon acceptance into JOSS, a CrossRef DOIs is minted and we archive your work with Zenodo.org.</p>

    <h3>Don't we have enough journals already?</h3>

    <p>Perhaps, and in a perfect world we'd rather papers about software we're necessary but we recognize that for most researchers, papers and not software are the currency of academic research and that citations are required for a good career.</p>

    <p>We built this journal because we believe that after you've done the hard work of writing great software, it shouldn't take weeks and months to create a paper<sup>1</sup> about your work.</p>

    <h3>You said <em>developer friendly</em>, what do you mean?</h3>

    <p>We have libraries in Python, R and Ruby to help you prepare your submission. If your software is already well documented then paper preparation should take no more than an hour.</p>

    <h3>What are your requirements for submission?</h3>

    <ul>
      <li>Your software should be open source and available in a public software repository and contain a <code>PAPER.md</code> file describing the overall design of your software</li>
      <li>Documentation describing the core API/software functionality, installation instructions and dependencies</li>
      <li>A <%= link_to "metadata", "https://github.com/codemeta/codemeta/blob/master/example-codemeta.json" %> file listing authors, citations and key dependencies</li>
    </ul>

    <h3>What does the submission &amp; review process look like?</h3>

    <ul>
      <li>Fill in the short <%= link_to "submission form", new_paper_path %></li>
      <li>A reviewer is assigned and the review is carried out in the JOSS GitHub repository</li>
      <li>Upon (successful) completion of the review, your paper is deposited in CrossRef and archived in Zenodo.org</li>
      <li>And that's it.</li>
    </ul>

    <p>1. After all, this is just <%= link_to "advertising", "http://statweb.stanford.edu/~wavelab/Wavelab_850/wavelab.pdf" %>.</p>
  </div>

  <div class="main" id="reviewer_guidelines">
    <h1>Reviewer guidelines</h1>

    <p class="lead">Firstly, thank you so much for agreeing to review for the Journal of Open Source Software (JOSS), we're delighted to have your help. This document is designed to outline our editorial guidelines and help you understand our requirements for accepting a submission into the JOSS.</p>

    <h2>Some guiding principles for you the reviewer</h2>

    <p>We like to think of JOSS as a 'developer friendly' journal. That is, if the submitting authors have followed best practices (have documentation, tests and a license) then their review should be extremely rapid.</p>
    <p>For those authors that don't quite meet the bar, please try to give clear feedback on how they could improve their submission. A key goal of JOSS is to raise the quality of research software generally and you (the experienced reviewer) are well placed to give this feedback.</p>

    <h2>The JOSS 'paper'</h2>

    <p>The JOSS 'paper' (the PDF associated with this submission) should be only include:</p>

    <ul>
      <li>A short abstract describing the high-level functionality of the software</li>
      <li>A list of the authors of the software</li>
      <li>A list of references including a link to the software archive</li>
    </ul>

    <p>Note the paper should <em>not</em> include software documentation such as API functionality, this should be outlined in the software documentation.</p>

    <h2>Software license</h2>

    <p>There should be an <%= link_to "OSI approved", "https://opensource.org/licenses/alphabetical" %> license included in the repository. Common licenses such as those listed on <%= link_to "http://choosealicense.com", "http://choosealicense.com" %> are preferred. Note there should be an actual license file present in the repository not just a reference to the license.</p>

    <blockquote>
      <p>
        Acceptable: A plain-text LICENSE file with the contents of an OSI approved license<br />
        Not acceptable: A phrase such as 'MIT license' in a README file
      </p>
    </blockquote>

    <h2>Documentation</h2>

    <p>There should be sufficient documentation for you, the reviewer to understand the core functionality of the software under review. A high-level overview of this documentation should be included in a README file (or equivalent). There should be:</p>

    <h3>A statement of need</h3 >

    <p>The authors should clearly state what problems the software is designed to solve and who the target audience is.</p>

    <h3>Installation instructions</h3>

    <p>There should be a clearly-stated list of dependencies. Ideally these should be handled with an automated package management solution.</p>

    <blockquote>
      <p>
        Good: A package management file such as a Gemfile or package.json or equivalent<br />
        OK: A list of dependencies to install<br />
        Bad (not acceptable): Reliance on other software not listed by the authors
      </p>
    </blockquote>

    <h3>Example usage</h3>

    <p>The authors should include examples of how to use the software (ideally to solve real-world analysis problems).</p>

    <h3>API documentation</h3>

    <p>Reviewers should check that the software API is documented to a suitable level. This decision is left largely to the discretion of the reviewer and their experience of evaluating the software.</p>

    <blockquote>
      <p>
        Good: All functions/methods are documented including example inputs and outputs<br />
        OK: Core API functionality is documented<br />
        Bad (not acceptable): API is undocumented
      </p>
    </blockquote>

    <h3>Tests</h3>

    <p>Authors are strongly encouraged to include an automated test suite covering the core functionality of their software.</p>

    <blockquote>
      <p>
        Good: An automated test suite hooked up to an external service such as Travis-CI<br />
        OK: Documented manual steps that can be followed to check the expected functionality of the software (e.g. a sample input file to assert behaviour)<br />
        Bad (not acceptable): No way for you the reviewer to check the functionality of the software
      </p>
    </blockquote>

    <h3>Community guidelines</h3>

    <p>There should be clear guidelines for third-parties wishing to:</p>

    <ul>
      <li>Contribute to the software</li>
      <li>Report an issue with the software</li>
      <li>Seek support</li>
    </ul>

    <h2>Functionality</h2>

    <p>Reviewers are expected to install the software they are reviewing and to verify the core functionality of the software.</p>

    <h2>Other considerations</h2>

    <h3>An important note about 'novel' software</h3>

    <p>Submissions that solve problems already solved but other software packages are accepted into JOSS provided that they meet the criteria listed above and cite prior similar work.</p>
  </div>
</div>
